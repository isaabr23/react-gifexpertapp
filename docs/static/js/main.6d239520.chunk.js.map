{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SACG,uBACKO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAYH,GAFhD,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IAD3B,IAEI,kCAAMA,EAAN,OAFJ,SCAKO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAd,GAEHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAItB,CAAEpB,IAGEqB,EDhByBI,CAAczB,GAAlCa,EAHyB,EAG9BN,KAAaa,EAHiB,EAGjBA,QAEnB,OACG,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEf7Be,EAAe,WAAM,MAIMxC,mBAAS,CAAC,gBAJhB,mBAIvByC,EAJuB,KAIX1C,EAJW,KAa9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCvBlC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6d239520.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => { //pasamos la destructurizacion de setCategories\r\n    \r\n    const [inputValue, setInputValue] = useState(''); // inputValue = ' ' por defecto *** PERO SIEMPRE SERA EL ULTIMO VALOR (con  sin cambios)\r\n    \r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value ) // ahora usamos el setInputValue que sera el estado nuevo e = evento ** asignamos al target el valor (value)\r\n    }\r\n\r\n    //prevenimos actualizacion por default al apretar enter y no se recarga la pagina completa\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2) { //eliminamos espacios(trim) y si es menor el largo a 2 letras lo insertamos\r\n            \r\n            setCategories( cats => [ inputValue, ...cats ] ); // (callback) ingresamos en inputValue = a lo que se agregara al dar click, y conforme ingresamos se colocara al principio (...cats = e√± primero inputValue = el ultimo agregado) \r\n            setInputValue(''); //vaciamos el valor despues del enter para que quede vacio\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }> \r\n           <input \r\n                type=\"text\"\r\n                value={ inputValue } // Le asignamos un valor (texto) a la casilla\r\n                onChange={ handleInputChange } // Cambiamos el valor del input\r\n           />\r\n        </form>\r\n    )\r\n}\r\n\r\n// Candado para que coloqueos si o si <AddCategory **** setCategories={setCategories} **** /> aqui\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI ( category ) }&limit=15&api_key=PAFGOUh6yrwuY1ttHXf4OjtCDr4EiIcY`; //encodeURI cambia los espacios por % en caso de que sea necesario\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n }","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => { // title y url es lo que recibiremos\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title } /> { /*muestra la imagen*/} \r\n            <p> { title } </p>  { /*muestra el titulo de la imagen*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => { // category = argumento\r\n\r\n// const [images, setImages] = useState([]);\r\n   const { data:images, loading } = useFetchGifs( category );\r\n\r\n     return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\"> Loading </p> }\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => (\r\n                            <GifGridItem \r\n                                key={ img.id }\r\n                                { ...img }\r\n                            />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>    \r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( img => {\r\n\r\n                setstate({\r\n                    data: img,\r\n                    loading: false\r\n                });\r\n                    \r\n            })    \r\n    }, [ category ])\r\n\r\n\r\n    return state; // { data: [], loading: true};\r\n}","\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];    \r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n    \r\n    // const handleApp = () => { // Agregamos mas valores cuando demos click\r\n\r\n    //     // setCategories( [ 'One Piece', ...categories ] ); // Agregamos al inicio  ...categories = al arreglo original\r\n    //     // setCategories( [...categories, 'One Piece' ] ); // Agregamos al final    ...categories = al arreglo original\r\n    //        setCategories( cats => [...cats, 'One Piece' ] ); // cats => (genera un nuevo arreglo) con [...arreglo original + nuevo elemento] se hace con CallBack\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleApp }>Agregar</button>   */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } /> \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}